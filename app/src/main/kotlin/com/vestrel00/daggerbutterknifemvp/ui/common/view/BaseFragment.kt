/*
 * Copyright 2018 Vandolf Estrellado
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.vestrel00.daggerbutterknifemvp.ui.common.view

import android.app.Dialog
import android.content.Context
import android.os.Bundle
import android.support.annotation.IdRes
import android.support.v4.app.Fragment
import android.support.v7.app.AppCompatDialogFragment
import butterknife.ButterKnife
import butterknife.Unbinder
import com.vestrel00.daggerbutterknifemvp.R
import dagger.android.DispatchingAndroidInjector
import dagger.android.support.AndroidSupportInjection
import dagger.android.support.HasSupportFragmentInjector
import javax.inject.Inject

/**
 * Abstract (Dialog)Fragment for all (Dialog)Fragments and child (Dialog)Fragments to extend.
 * This contains some boilerplate dependency injection code and activity [Context].
 *
 * **WHY EXTEND DialogFragment?**
 *
 * [AppCompatDialogFragment]s are simple extensions of Fragments. DialogFragments can be shown as a
 * dialog floating above the current activity or be embedded into views like regular fragments.
 * Therefore, supporting both Fragments and DialogFragments for dependency injection can simply be
 * achieved by having the base fragment class (this) extend DialogFragment instead of Fragment.
 * We could have separate base classes for Fragments and DialogFragments but that would produce
 * duplicate code. See See https://github.com/vestrel00/android-dagger-butterknife-mvp/pull/64
 *
 * Note that as of Dagger 2.12, the abstract base framework type
 * [dagger.android.support.DaggerAppCompatDialogFragment] has been introduced for subclassing if so
 * desired.
 *
 * **DEPENDENCY INJECTION**
 *
 * We could extend [dagger.android.support.DaggerAppCompatDialogFragment] so we can get the
 * boilerplate dagger code for free. However, we want to avoid inheritance (if possible and it is in
 * this case) so that we have to option to inherit from something else later on if needed.
 *
 * **VIEW BINDING**
 *
 * This fragment handles view bind and unbinding.
 */
abstract class BaseFragment : AppCompatDialogFragment(), HasSupportFragmentInjector {

    @Inject
    lateinit var childFragmentInjector: DispatchingAndroidInjector<Fragment>

    /*
     * The property `childFragmentManager` cannot be declared here with that name as it results in
     * an 'accidental override' compile-time error. Kotlin automatically generates getters for
     * properties. In this case, Kotlin generates a method called `getChildFragmentManager()` for
     * the property `childFragmentManager`, which then conflicts with the Activity's
     * `getChildFragmentManager()` method.
     *
     * There are workarounds to this;
     *
     * 1. Change the property name to something else such as `fragmentChildFragmentManager`.
     * 2. Rename the getter generated by Kotlin using @get:JvmName("fragmentChildFragmentManager")
     *
     * However, we will not be doing any of the above because subclasses would have to use our
     * custom getter/property instead of the builtin `childFragmentManager`, which may cause
     * confusion.
     *
     * The caveat to this is that we would need to use Robolectric in our tests in order to mock and
     * verify `FragmentManager` usages. For more details around testing `FragmentManager` usages,
     * see https://github.com/vestrel00/android-dagger-butterknife-mvp/pull/52.
     */
    // @Inject
    // @field:Named(BaseFragmentModule.CHILD_FRAGMENT_MANAGER)
    // protected lateinit var childFragmentManager: FragmentManager

    /*
     * This coincides with workaround #1 from the above comment about `childFragmentManager`. We'll
     * just use the `context` reference provided by Kotlin (from the Fragment's `getContext()`
     * method).
     */
    // @Inject
    // protected lateinit var activityContext: Context

    private var viewUnbinder: Unbinder? = null

    override fun onAttach(context: Context) {
        // This is called even for API levels below 23.
        AndroidSupportInjection.inject(this)
        super.onAttach(context)
    }

    override fun onCreateDialog(savedInstanceState: Bundle?): Dialog {
        // Quick fix for the dialog width not taking up most of the screen width.
        setStyle(AppCompatDialogFragment.STYLE_NORMAL, R.style.Theme_AppCompat_Dialog_MinWidth);
        return super.onCreateDialog(savedInstanceState)
    }

    override fun onViewStateRestored(savedInstanceState: Bundle?) {
        super.onViewStateRestored(savedInstanceState)
        /*
         * Bind the views here instead of in onViewCreated so that view state changed listeners
         * are not invoked automatically without user interaction.
         *
         * If we bind before this method (e.g. onViewCreated), then any checked changed
         * listeners bound by ButterKnife will be invoked during fragment recreation (since
         * Android itself saves and restores the views' states. Take a look at this gist for a
         * concrete example: https://gist.github.com/vestrel00/982d585144423f728342787341fa001d
         *
         * The lifecycle order is as follows (same if added via xml or java or if retain
         * instance is true):
         *
         * onAttach
         * onCreateView
         * onViewCreated
         * onActivityCreated
         * onViewStateRestored
         * onResume
         *
         * Note that the onCreate (and other lifecycle events) are omitted on purpose. The
         * caveat to this approach is that views, listeners, and resources bound by
         * Butterknife will be null until onViewStatedRestored. Just be careful not to use any
         * objects bound using Butterknife before onViewStateRestored.
         *
         * Fragments that do not return a non-null View in onCreateView results in onViewCreated
         * and onViewStateRestored not being called. This means that Butterknife.bind will not get
         * called, which is completely fine because there is no View to bind. Furthermore, there is
         * no need to check if getView() returns null here because this lifecycle method only gets
         * called with a non-null View.
         */
        viewUnbinder = ButterKnife.bind(this, view!!)
    }

    override fun onDestroyView() {
        // This lifecycle method still gets called even if onCreateView returns a null view.
        viewUnbinder?.unbind()
        super.onDestroyView()
    }

    override fun supportFragmentInjector() = childFragmentInjector

    protected fun addChildFragment(@IdRes containerViewId: Int, fragment: Fragment) =
            childFragmentManager.beginTransaction()
                    .add(containerViewId, fragment)
                    .commit()
}